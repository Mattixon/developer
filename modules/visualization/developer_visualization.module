<?php

/**
 * @file
 * Contain all hook functions for Developer Visualization module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;

/**
 * Implements hook_theme().
 *
 * Add module themes.
 */
function developer_visualization_theme(): array {
  return [
    'visualization_presentation' => [
      'variables' => [
        'block_id' => NULL,
        'flat_description' => [],
        'guide' => NULL,
        'image' => [],
        'paths' => [],
        'back_btn' => NULL,
        'ask_for_offer_btn' => NULL,
        'floor_legend' => [],
        'flats_tooltip_data' => [],
        'webform' => [],
        'front_url' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_entity_bundle_after_create().
 *
 * Add coordinates field when new entity type is build.
 */
function developer_visualization_entity_bundle_after_create(string $entity_type_id): void {
  $entity_type_list = [
    'developer_building',
    'developer_floor',
    'developer_flat',
  ];

  if (in_array($entity_type_id, $entity_type_list)) {
    $coodinates_field_service = \Drupal::service('developer_visualization.coordinates_field_service');
    $coodinates_field_service->createCoordinatesField();
  }
}

/**
 * Implements hook_form_alter().
 *
 * Add states to Developer Building entity on coordinates.
 */
function developer_visualization_form_alter(array &$form, FormStateInterface $form_state, string $form_id): void {
  if (str_starts_with($form_id, 'developer_building_')) {
    $form['coordinates']['#states'] = [
      'visible' => [
        ':input[name="estate_id[0][target_id]"]' => ['filled' => TRUE],
      ],
    ];
  }
}

/**
 * Implements template_preprocess_form_element_label().
 *
 * Add required class to custom required validated fields.
 */
function developer_visualization_preprocess_form_element_label(array &$variables): void {
  $elements = [
    'Select starting estate',
    'Select starting building',
  ];
  $element_title = '';

  if ($variables['element']['#title'] instanceof TranslatableMarkup) {
    $element_title = $variables['element']['#title']->getUntranslatedString();
  }
  else {
    $element_title = $variables['element']['#title'];
  }

  if (in_array($element_title, $elements)) {
    $variables['attributes']['class'][] = 'form-required';
  }
}
